
# === simulation ===
ros2 launch linorobot2_gazebo gazebo.launch.py # default world: turtlebot3_world
# verbose
ros2 launch linorobot2_gazebo gazebo.launch.py \
    world:=$(ros2 pkg prefix turtlebot3_gazebo)/share/turtlebot3_gazebo/worlds/turtlebot3_world.world x:=0.5

# === simulation using rmf's traffic-editor generated world ===
ros2 launch linorobot2_gazebo sim.launch.py map_name:=fit_office # default world: tb3


<<<----------------------------------------------------------------------->>>

# === slam mapping ===
ros2 launch linorobot2_navigation slam.launch.py


# === save the map ===
ros2 run nav2_map_server map_saver_cli -f mymap # pgm/yaml
ros2 service call /slam_toolbox/serialize_map slam_toolbox/srv/SerializePoseGraph "filename: '$HOME/maps/mymap'" # serialized map for continuous mapping


# === navigation ===
ros2 launch linorobot2_navigation navigation.launch.py sim:=true rviz:=true
# verbose
ros2 launch linorobot2_navigation navigation.launch.py sim:=true rviz:true \
    map:=/opt/ros/humble/share/turtlebot3_navigation2/map/map.yaml

# === navigation using traffic-editor generated gazebo world & slamed maps ===
ros2 launch linorobot2_navigation navigation_rmf.launch.py sim:=true rviz:=true map_name:=fit_office_res002_0926


# === defined-route navigation ===
ros2 launch linorobot2_navigation navigation_keepout.launch.py sim:=true rviz:=true
# verbose
ros2 launch linorobot2_navigation navigation_keepout.launch.py sim:=true rviz:=true \
    map:=/opt/ros/humble/share/turtlebot3_navigation2/map/map.yaml \
    mask:=$HOME/maps/keepout_mask.yaml

# === defined_route navigation using traffic-editor generated gazebo world & slamed maps & homebrewed masks ===
ros2 launch linorobot2_navigation navigation_keepout_rmf.launch.py sim:=true rviz:=true \
    map_name:=fit_office_res002_0926
